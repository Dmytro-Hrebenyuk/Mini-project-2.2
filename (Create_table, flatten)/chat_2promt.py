"""Two functions one creates table one takes away lists"""
import tracemalloc
import time
def create_table(n: int, m: int):
    """
    Creates a table of nums using recursion.
    
    >>> create_table(4, 6)
    [[1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6], [1, 3, 6, 10, 15, 21], [1, 4, 10, 20, 35, 56]]
    """
    def fill_table(i, j):
        if i == 0 or j == 0:
            return 1
        return fill_table(i - 1, j) + fill_table(i, j - 1)
    table = [[fill_table(i, j) for j in range(m)] for i in range(n)]
    return table

def flatten(lst):
    """
    Takes away all list to have only one list of numbers
    list->list
    >>> flatten([1,[2]])
    [1, 2]
    >>> flatten([1,2,[3,[4,5],6],7])
    [1, 2, 3, 4, 5, 6, 7]
    >>> flatten(['wow', [2,[[]]], [True]])
    ['wow', 2, True]
    >>> flatten([])
    []
    >>> flatten([[]])
    []
    >>> flatten(3)
    3
    """
    if not isinstance(lst, list):
        return lst  # Return the input list if it's not a list
    flattened = []
    for item in lst:
        if isinstance(item, list):
            flattened.extend(flatten(item))
        else:
            flattened.append(item)
    return flattened
tracemalloc.start()
start1=time.time()
create_table(6,40)
end1=time.time()
memory_stats1 = tracemalloc.get_traced_memory()
tracemalloc.stop()

tracemalloc.start()
start2=time.time()
flatten(
    [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7], [1, 2, [3, [4, 5], 6], 7, [1, 2, [3, [4, 5], 6], 7]]]]]]]]
)
end2=time.time()
memory_stats2 = tracemalloc.get_traced_memory()
tracemalloc.stop()

print(f"Crating a table took {end1-start1}")
print("Memory usage:", memory_stats1)
print()
print(f"Flatening took {end2-end1}")
print("Memory usage:", memory_stats2)
